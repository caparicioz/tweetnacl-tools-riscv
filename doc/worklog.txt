Project done by Aurora Solis (md716924@iteso.mx) and Christian Aparicio (caparicio0000@hotmail.com).
Setup: This repository works once the riscv-gnu-toolchain has been succesfully installed and added to the env PATH, this will not be discussed through this file.
Objective: Create an purpose-enhanced ISA, increasing it's performance in at least 1000x. The specific application for the enhancement is the open source/auditable encryption mechanism of tweetnacl. The implementation has been originally cloned from (https://github.com/sbp/tweetnacl-tools.git).

Steps.
 1.  Clone original tweetnacl-tools repo.
 2.  "Sleep" function is not supported in riscv-gnu, it was replaced for NOPS (1s=1 NOP)
 3.  In tools.c "access" function is not supported in riscv-gnu, it was replaced with fopen to read
 4.  File handler raises a segfault when it tries to create a new file, to prevent the error a check was implemented, whenever a file needs to be accessed, it must be previously created from scratch (empty).
 5.  Along dirs for work in gcc or riscv-gcc simultaneously were created.
 6.  Set environment and source file per each dir, since the gcc version should not be modified along the way.
 7.  Create scripts to run encryption according to the compiler.
 8.  Create scripts to run decryption according to the compiler.
 9.  Added time.h to measure execution time in c, it does not work in riscv ISA
 10. Generate asm of the .c files in riscv while running the makefile, stored in asm dir
 11. Create dump_files.sh, this scripts generates a .s files, which shows the dissasembly of the binary file previously generated by riscv-gcc compiler, by doing so, it can be observed what is really written to the program memory and now the address of each instruction as well as remove the pseudoinstructions of the file in asm.
 12. Run dump_files.sh in makefile
 13. Create dummy scripts to comprehend the usage of rdcycle riscv function.
 14. The execution and analysis of rdcycle function shows that it is giving indeed the cycles count taken by the sim to execute but the compiler always delivers different outputs when adding instructions, but shows consistency when replacing them, so we can partially trust it. 
 15. With the rdcycles done, now the same mechanisim was implemented to read the other information csrs such as rdtime and rdinstret, this will give us some extra information on the execution of the simulation.
 16. The histogram option was configured in spike ellab and implemented in encrypt-decrypt code, the log can be implemented but slows down the sim time, so it was removed as the information of the histogram can be matched to the dump.
 18. clean_repo.sh was created, this script removes all not needed files to push to head.
 19. Riscv dir was copied into riscv_performance, here is where the source code will be modified to enhance performance
 
 20. PERFORMANCE ENHANCEMENT
 Initial Execution results
                No.cycles		185746628
                Exec time		1916950
                Instructions retired	185746768

    20.1 Identified a loop in the c code and mapped it to the dump file, finally look at it in the histogram, it is executed 15492 times.
         20.1.1. Inside "sv core" function. Loop unroll to FOR. Original code:
                  FOR(i,4) {
                    x[5*i] = ld32(c+4*i);
                    x[1+i] = ld32(k+4*i);
                    x[6+i] = ld32(in+4*i);
                    x[11+i] = ld32(k+16+4*i);
                    }

                New code:
 
                    for (i = 0;i < 4; i+=2) {
                    x[5*i] = ld32(c+4*i);
                    x[1+i] = ld32(k+4*i);
                    x[6+i] = ld32(in+4*i);
                    x[11+i] = ld32(k+16+4*i);
                    x[5*(i+1)] = ld32(c+4*(i+1));
                    x[1+(i+1)] = ld32(k+4*(i+1));
                    x[6+(i+1)] = ld32(in+4*(i+1));
                    x[11+(i+1)] = ld32(k+16+4*(i+1));
                    }

       The changes are keeped but it does not make any improvement to the encryption.

